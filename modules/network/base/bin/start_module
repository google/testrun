#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Directory where all binaries will be loaded
BIN_DIR="/testrun/bin"

# Default interface should be veth0 for all containers
DEFAULT_IFACE=veth0

# Create a local user that matches the same as the host
# to be used for correct file ownership for various logs
# HOST_USER mapped in via docker container environemnt variables
useradd $HOST_USER

# Enable IPv6 for all containers
sysctl net.ipv6.conf.all.disable_ipv6=0
sysctl -p

# Read in the config file
CONF_FILE="/testrun/conf/module_config.json"
CONF=`cat $CONF_FILE`

if [[ -z $CONF ]]
then
	echo "No config file present at $CONF_FILE.  Exiting startup."
	exit 1
fi

# Extract the necessary config parameters
MODULE_NAME=$(echo "$CONF" | jq -r '.config.meta.name')
DEFINED_IFACE=$(echo "$CONF" | jq -r '.config.network.interface')
HOST=$(echo "$CONF" | jq -r '.config.network.host')
GRPC=$(echo "$CONF" | jq -r '.config.grpc')

# Validate the module name is present
if [[ -z "$MODULE_NAME" || "$MODULE_NAME" == "null" ]]
then
	echo "No module name present in $CONF_FILE.  Exiting startup."
	exit 1
fi

# Select which interace to use
if [[ -z $DEFINED_IFACE || "$DEFINED_IFACE" == "null" ]]
then
	echo "No Interface Defined, defaulting to veth0"
	INTF=$DEFAULT_IFACE
else
	INTF=$DEFINED_IFACE
fi

# Setup the PYTHONPATH so all imports work as expected
echo "Setting up PYTHONPATH..."
export PYTHONPATH=$($BIN_DIR/setup_python_path)
echo "PYTHONPATH: $PYTHONPATH"

echo "Configuring binary files..."
$BIN_DIR/setup_binaries $BIN_DIR

echo "Starting module $MODULE_NAME on local interface $INTF..."

# Only non-host containers will have a specific
# interface for capturing
if [[ "$HOST" != "true" ]]; then

	# Wait for interface to become ready
	$BIN_DIR/wait_for_interface $INTF

	# Small pause to let the interface stabalize before starting the capture
	#sleep 1 

	# Start network capture
	$BIN_DIR/capture $MODULE_NAME $INTF
fi

# Start the grpc server
if [[ ! -z $GRPC && ! $GRPC == "null" ]]
then
	GRPC_PORT=$(echo "$GRPC" | jq -r '.port')
	if [[ ! -z $GRPC_PORT && ! $GRPC_PORT == "null" ]]
	then
		echo "gRPC port resolved from config: $GRPC_PORT"
		$BIN_DIR/start_grpc "-p $GRPC_PORT"
	else
		$BIN_DIR/start_grpc
	fi
fi

# Small pause to let all core services stabalize
sleep 3

# Start the networking service
$BIN_DIR/start_network_service $MODULE_NAME $INTF
