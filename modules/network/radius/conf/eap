eap {

	default_eap_type = tls

	#  A list is maintained to correlate EAP-Response
	#  packets with EAP-Request packets.  After a
	#  configurable length of time, entries in the list
	#  expire, and are deleted.
	#
	timer_expire = 60

	#  There are many EAP types, but the server has support
	#  for only a limited subset.  If the server receives
	#  a request for an EAP type it does not support, then
	#  it normally rejects the request.  By setting this
	#  configuration to "yes", you can tell the server to
	#  instead keep processing the request.  Another module
	#  MUST then be configured to proxy the request to
	#  another RADIUS server which supports that EAP type.
	#
	#  If another module is NOT configured to handle the
	#  request, then the request will still end up being
	#  rejected.
	#
	ignore_unknown_eap_types = no

	# Cisco AP1230B firmware 12.2(13)JA1 has a bug.  When given
	# a User-Name attribute in an Access-Accept, it copies one
	# more byte than it should.
	#
	# We can work around it by configurably adding an extra
	# zero byte.
	#
	cisco_accounting_username_bug = no

	#  Help prevent DoS attacks by limiting the number of
	#  sessions that the server is tracking.  For simplicity,
	#  this is taken from the "max_requests" directive in
	#  radiusd.conf.
	#
	max_sessions = ${max_requests}

	#  Common TLS configuration for TLS-based EAP types
	#  ------------------------------------------------
	#
	#  See raddb/certs/README.md for additional comments
	#  on certificates.
	#
	#  If OpenSSL was not found at the time the server was
	#  built, the "tls", "ttls", and "peap" sections will
	#  be ignored.
	#
	#  If you do not currently have certificates signed by
	#  a trusted CA you may use the 'snakeoil' certificates.
	#  Included with the server in raddb/certs.
	#
	#  If these certificates have not been auto-generated:
	#    cd raddb/certs
	#    make
	#
	#  These test certificates SHOULD NOT be used in a normal
	#  deployment.  They are created only to make it easier
	#  to install the server, and to perform some simple
	#  tests with EAP-TLS, TTLS, or PEAP.
	#
	#  Note that you should NOT use a globally known CA here!
	#  e.g. using a Verisign cert as a "known CA" means that
	#  ANYONE who has a certificate signed by them can
	#  authenticate via EAP-TLS!  This is likely not what you want.
	#
	tls-config tls-common {
		private_key_password = whatever
		private_key_file = /etc/ssl/private/ssl-cert-snakeoil.key

		#  If Private key & Certificate are located in
		#  the same file, then private_key_file &
		#  certificate_file must contain the same file
		#  name.
		#
		#  If ca_file (below) is not used, then the
		#  certificate_file below SHOULD also include all of
		#  the intermediate CA certificates used to sign the
		#  server certificate, but NOT the root CA.
		#
		#  Including the ROOT CA certificate is not useful and
		#  merely inflates the exchanged data volume during
		#  the TLS negotiation.
		#
		#  This file should contain the server certificate,
		#  followed by intermediate certificates, in order.
		#  i.e. If we have a server certificate signed by CA1,
		#  which is signed by CA2, which is signed by a root
		#  CA, then the "certificate_file" should contain
		#  server.pem, followed by CA1.pem, followed by
		#  CA2.pem.
		#
		#  When using "ca_file" or "ca_dir", the
		#  "certificate_file" should contain only
		#  "server.pem".  And then you may (or may not) need
		#  to set "auto_chain", depending on your version of
		#  OpenSSL.
		#
		#  In short, SSL / TLS certificates are complex.
		#  There are many versions of software, each of which
		#  behave slightly differently.  It is impossible to
		#  give advice which will work everywhere.  Instead,
		#  we give general guidelines.
		#
		certificate_file = /etc/ssl/certs/ssl-cert-snakeoil.pem

		#  Trusted Root CA list
		#
		#  This file can contain multiple CA certificates.
		#  ALL of the CA's in this list will be trusted to
		#  issue client certificates for authentication.
		#
		#  In general, you should use self-signed
		#  certificates for 802.1x (EAP) authentication.
		#  In that case, this CA file should contain
		#  *one* CA certificate.
		#
		ca_file = /etc/ssl/certs/ca-certificates.crt

		#  Check the Certificate Revocation List
		#
		#  1) Copy CA certificates and CRLs to same directory.
		#  2) Execute 'c_rehash <CA certs&CRLs Directory>'.
		#     'c_rehash' is OpenSSL's command.
		#  3) uncomment the lines below.
		#  5) Restart radiusd
	#	check_crl = yes

		# Check if intermediate CAs have been revoked.
	#	check_all_crl = yes

		ca_path = ${cadir}

		# OpenSSL does not reload contents of ca_path dir over time.
		# That means that if check_crl is enabled and CRLs are loaded
		# from ca_path dir, at some point CRLs will expire and
		# RADIUSd will stop authenticating users.
		# If ca_path_reload_interval is non-zero, it will force OpenSSL
		# to reload all data from ca_path periodically
		#
		# Flush ca_path each hour
	#	ca_path_reload_interval = 3600


		# Accept an expired Certificate Revocation List
		#
	#	allow_expired_crl = no

		#  If check_cert_issuer is set, the value will
		#  be checked against the DN of the issuer in
		#  the client certificate.  If the values do not
		#  match, the certificate verification will fail,
		#  rejecting the user.
		#
		#  This check can be done more generally by checking
		#  the value of the TLS-Client-Cert-Issuer attribute.
		#  This check can be done via any mechanism you
		#  choose.
		#
	#	check_cert_issuer = "/C=GB/ST=Berkshire/L=Newbury/O=My Company Ltd"

		#  If check_cert_cn is set, the value will
		#  be xlat'ed and checked against the CN
		#  in the client certificate.  If the values
		#  do not match, the certificate verification
		#  will fail rejecting the user.
		#
		#  This check is done only if the previous
		#  "check_cert_issuer" is not set, or if
		#  the check succeeds.
		#
		#  This check can be done more generally by writing
		#  "unlang" statements to examine the value of the
		#  TLS-Client-Cert-Common-Name attribute.
		#
	#	check_cert_cn = %{User-Name}

		#
		#  This configuration item only applies when there is
		#  an intermediate CA between the "root" CA, and the
		#  client certificate.  If we trust the root CA, then
		#  by definition we also trust ANY intermediate CA
		#  which is signed by that root.  This means ANOTHER
		#  intermediate CA can issue client certificates, and
		#  have them accepted by the EAP module.
		#
		#  The solution is to list ONLY the trusted CAs in the
		#  FreeRADIUS configuration, and then set this
		#  configuration item to "yes".
		#
		#  Then, when the server receives a client certificate
		#  from an untrusted CA, that authentication request
		#  can be rejected.
		#
		#  It is possible to do these checks in "unlang", by
		#  checking for unknown names in the
		#  TLS-Cert-Common-Name attribute, but that is
		#  more complex.  So we add a configuration option
		#  which can be set once, and which works for all
		#  possible intermediate CAs, no matter what their
		#  value.
		#
	#	reject_unknown_intermediate_ca = no

		#  Set this option to specify the allowed
		#  TLS cipher suites.  The format is listed
		#  in "man 1 ciphers".
		#
		cipher_list = "DEFAULT"

		#  If enabled, OpenSSL will use server cipher list
		#  (possibly defined by cipher_list option above)
		#  for choosing right cipher suite rather than
		#  using client-specified list which is OpenSSl default
		#  behavior.  Setting this to "yes" means that OpenSSL
		#  will choose the servers ciphers, even if they do not
		#  best match what the client sends.
		#
		#  TLS negotiation is usually good, but can be imperfect.
		#  This setting allows administrators to "fine tune" it
		#  if necessary.
		#
		cipher_server_preference = no

		#  You can selectively disable TLS versions for
		#  compatability with old client devices.
		#
		#  If your system has OpenSSL 1.1.0 or greater, do NOT
		#  use these.  Instead, set tls_min_version and
		#  tls_max_version.
		#
#		disable_tlsv1_2 = yes
#		disable_tlsv1_1 = yes
#		disable_tlsv1 = yes


		#  Set min / max TLS version.
		#
		#  Generally speaking you should NOT use TLS 1.0 or
		#  TLS 1.1.  They are old, possibly insecure, and
		#  deprecated.  However, it is sometimes necessary to
		#  enable it for compatibility with legact systems.
		#  We recommend replacing those legacy systems, and
		#  using at least TLS 1.2.
		#
		#  Some Debian versions disable older versions of TLS,
		#  and requires the application to manually enable
		#  them.
		#
		#  If you are running such a distribution, you should
		#  set these options, otherwise older clients will not
		#  be able to connect.
		#
		#  Allowed values are "1.0", "1.1", "1.2", and "1.3".
		#
		#  As of 2021, it is STRONGLY RECOMMENDED to set
		#
		#	tls_min_version = "1.2"
		#
		#  Older TLS versions are insecure and deprecated.
		#
		#  In order to enable TLS 1.0 and TLS 1.1, you may
		#  also need to update cipher_list below to:
		#
		#   * OpenSSL >= 3.x
		#
		#	cipher_list = "DEFAULT@SECLEVEL=0"
		#
		#   * OpenSSL < 3.x
		#
		#	cipher_list = "DEFAULT@SECLEVEL=1"
		#
		#  The values must be in quotes.
		#
		#  We also STRONGLY RECOMMEND to set
		#
		#	tls_max_version = "1.2"
		#
		#  While the server will accept "1.3" as a value,
		#  most EAP supplicants WILL NOT DO TLS 1.3 PROPERLY.
		#
		#  i.e. they WILL NOT WORK, SO DO NOT ASK QUESTIONS ON
		#  THE LIST ABOUT WHY IT DOES NOT WORK.
		#
		#  The TLS 1.3 support is here for future
		#  compatibility, as clients get upgraded, and people
		#  don't upgrade their copies of FreeRADIUS.
		#
		#  Also note that we only support TLS 1.3 for EAP-TLS.
		#  Other versions of EAP (PEAP, TTLS, FAST) DO NOT
		#  SUPPORT TLS 1.3.
		#
		tls_min_version = "1.2"
		tls_max_version = "1.2"

		#  Elliptical cryptography configuration
		#
		#  This configuration should be one of the following:
		#
		#  * a name of the curve to use, e.g. "prime256v1".
		#
		#  * a colon separated list of curve NIDs or names.
		#
		#  * an empty string, in which case OpenSSL will choose
		#    the "best" curve for the situation.
		#
		#  For supported curve names, please run
		#
		#	openssl ecparam -list_curves
		#
		ecdh_curve = ""

		#  Session resumption / fast reauthentication
		#  cache.
		#
		#  The cache contains the following information:
		#
		#   session Id - unique identifier, managed by SSL
		#   User-Name  - from the Access-Accept
		#   Stripped-User-Name - from the Access-Request
		#   Cached-Session-Policy - from the Access-Accept
		#
		#  See also the "store" subsection below for
		#  additional attributes which can be cached.
		#
		#  The "Cached-Session-Policy" is the name of a
		#  policy which should be applied to the cached
		#  session.  This policy can be used to assign
		#  VLANs, IP addresses, etc.  It serves as a useful
		#  way to re-apply the policy from the original
		#  Access-Accept to the subsequent Access-Accept
		#  for the cached session.
		#
		#  On session resumption, these attributes are
		#  copied from the cache, and placed into the
		#  reply list.
		#
		#  You probably also want "use_tunneled_reply = yes"
		#  when using fast session resumption.
		#
		#  You can check if a session has been resumed by
		#  looking for the existence of the EAP-Session-Resumed
		#  attribute.  Note that this attribute will *only*
		#  exist in the "post-auth" section.
		#
		#  CAVEATS: The cache is stored and reloaded BEFORE
		#  the "post-auth" section is run.  This limitation
		#  makes caching more difficult than it should be.  In
		#  practice, it means that the first authentication
		#  session must set the reply attributes before the
		#  post-auth section is run.
		#
		#  When the session is resumed, the attributes are
		#  restored and placed into the session-state list.
		#
		cache {
			#  Enable it.  The default is "no". Deleting the entire "cache"
			#  subsection also disables caching.
			#
			#  The session cache requires the use of the
			#  "name" and "persist_dir" configuration
			#  items, below.
			#
			#  The internal OpenSSL session cache has been permanently
			#  disabled.
			#
			#  You can disallow resumption for a particular user by adding the
			#  following attribute to the control item list:
			#
			#    Allow-Session-Resumption = No
			#
			#  If "enable = no" below, you CANNOT enable resumption for just one
			#  user by setting the above attribute to "yes".
			#
			enable = no

			#  Lifetime of the cached entries, in hours. The sessions will be
			#  deleted/invalidated after this time.
			#
			lifetime = 24 # hours

			#  Internal "name" of the session cache. Used to
			#  distinguish which TLS context sessions belong to.
			#
			#  The server will generate a random value if unset.
			#  This will change across server restart so you MUST
			#  set the "name" if you want to persist sessions (see
			#  below).
			#
		#	name = "EAP module"

			#  Simple directory-based storage of sessions.
			#  Two files per session will be written, the SSL
			#  state and the cached VPs. This will persist session
			#  across server restarts.
			#
			#  The default directory is ${logdir}, for historical
			#  reasons.  You should ${db_dir} instead.  And check
			#  the value of db_dir in the main radiusd.conf file.
			#  It should not point to ${raddb}
			#
			#  The server will need write perms, and the directory
			#  should be secured from anyone else. You might want
			#  a script to remove old files from here periodically:
			#
			#    find ${logdir}/tlscache -mtime +2 -exec rm -f {} \;
			#
			#  This feature REQUIRES "name" option be set above.
			#
		#	persist_dir = "${logdir}/tlscache"

			#
			#  As of 3.0.20, it is possible to partially
			#  control which attributes exist in the
			#  session cache.  This subsection lists
			#  attributes which are taken from the reply,
			#  and saved to the on-disk cache.  When the
			#  session is resumed, these attributes are
			#  added to the "session-state" list.  The
			#  default configuration will then take care
			#  of copying them to the reply.
			#
			store {
				Tunnel-Private-Group-Id
			}
		}

		#  Client certificates can be validated via an
		#  external command.  This allows dynamic CRLs or OCSP
		#  to be used.
		#
		#  This configuration is commented out in the
		#  default configuration.  Uncomment it, and configure
		#  the correct paths below to enable it.
		#
		#  If OCSP checking is enabled, and the OCSP checks fail,
		#  the verify section is not run.
		#
		#  If OCSP checking is disabled, the verify section is
		#  run on successful certificate validation.
		#
		verify {
			#  If the OCSP checks succeed, the verify section
			#  is run to allow additional checks.
			#
			#  If you want to skip verify on OCSP success,
			#  uncomment this configuration item, and set it
			#  to "yes".
			#
		#	skip_if_ocsp_ok = no

			#  A temporary directory where the client
			#  certificates are stored.  This directory
			#  MUST be owned by the UID of the server,
			#  and MUST not be accessible by any other
			#  users.  When the server starts, it will do
			#  "chmod go-rwx" on the directory, for
			#  security reasons.  The directory MUST
			#  exist when the server starts.
			#
			#  You should also delete all of the files
			#  in the directory when the server starts.
			#
		#	tmpdir = /tmp/radiusd

			#  The command used to verify the client cert.
			#  We recommend using the OpenSSL command-line
			#  tool.
			#
			#  The ${..ca_path} text is a reference to
			#  the ca_path variable defined above.
			#
			#  The %{TLS-Client-Cert-Filename} is the name
			#  of the temporary file containing the cert
			#  in PEM format.  This file is automatically
			#  deleted by the server when the command
			#  returns.
			#
		#	client = "/path/to/openssl verify -CApath ${..ca_path} %{TLS-Client-Cert-Filename}"
		}

		#  OCSP Configuration
		#
		#  Certificates can be verified against an OCSP
		#  Responder. This makes it possible to immediately
		#  revoke certificates without the distribution of
		#  new Certificate Revocation Lists (CRLs).
		#
		ocsp {
			#  Enable it.  The default is "no".
			#  Deleting the entire "ocsp" subsection
			#  also disables ocsp checking
			#
			enable = no

			#  The OCSP Responder URL can be automatically
			#  extracted from the certificate in question.
			#  To override the OCSP Responder URL set
			#  "override_cert_url = yes".
			#
			override_cert_url = yes

			#  If the OCSP Responder address is not extracted from
			#  the certificate, the URL can be defined here.
			#
			url = "http://127.0.0.1/ocsp/"

			# If the OCSP Responder can not cope with nonce
			# in the request, then it can be disabled here.
			#
			# For security reasons, disabling this option
			# is not recommended as nonce protects against
			# replay attacks.
			#
			# Note that Microsoft AD Certificate Services OCSP
			# Responder does not enable nonce by default. It is
			# more secure to enable nonce on the responder than
			# to disable it in the query here.
			# See http://technet.microsoft.com/en-us/library/cc770413%28WS.10%29.aspx
			#
		#	use_nonce = yes

			# Number of seconds before giving up waiting
			# for OCSP response. 0 uses system default.
			#
		#	timeout = 0

			# Normally an error in querying the OCSP
			# responder (no response from server, server did
			# not understand the request, etc) will result in
			# a validation failure.
			#
			# To treat these errors as 'soft' failures and
			# still accept the certificate, enable this
			# option.
			#
			# Warning: this may enable clients with revoked
			# certificates to connect if the OCSP responder
			# is not available. Use with caution.
			#
		#	softfail = no
		}

		#
		#  The server can present different certificates based
		#  on the realm presented in EAP.  See
		#  raddb/certs/realms/README.md for examples of how to
		#  configure this.
		#
		#  Note that the default is to use the same set of
		#  realm certificates for both EAP and RadSec!  If
		#  this is not what you want, you should use different
		#  subdirectories or each, e.g. ${certdir}/realms/radsec/,
		#  and ${certdir}/realms/eap/
		#
	#	realm_dir = ${certdir}/realms/
	}

	#  EAP-TLS
	#
	#  The TLS configuration for TLS-based EAP types is held in
	#  the "tls-config" section, above.
	#
	tls {
		#  Point to the common TLS configuration
		#
		tls = tls-common

		#  As part of checking a client certificate, the EAP-TLS
		#  sets some attributes such as TLS-Client-Cert-Common-Name. This
		#  virtual server has access to these attributes, and can
		#  be used to accept or reject the request.
		#
	#	virtual_server = check-eap-tls

		#  You can control whether or not EAP-TLS requires a
		#  client certificate by setting
		#
		#	configurable_client_cert = yes
		#
		#  Once that setting has been changed, you can then set
		#
		#	EAP-TLS-Require-Client-Cert = No
		#
		#  in the control items for a request, and the EAP-TLS
		#  module will not require a client certificate from
		#  the supplicant.
		#
		#  WARNING: This configuration should only be used
		#  when the users are placed into a "captive portal"
		#  or "walled garden", where they have limited network
		#  access.  Otherwise the configuraton will allow
		#  anyone on the network, without authenticating them!
		#
#		configurable_client_cert = no
	}

}
