#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o xtrace
ip a
TEST_DIR=/tmp/results
TESTRUN_DIR=/usr/local/testrun
MATRIX=testing/tests/test_tests.json

rm -rf $TEST_DIR/
mkdir -p $TEST_DIR

# Setup requirements
sudo apt-get update
sudo apt-get install -y openvswitch-common openvswitch-switch tcpdump jq moreutils coreutils isc-dhcp-client

pip3 install pytest==7.4.4

# Start OVS
# Setup device network
sudo ip link add dev xyz type dummy
sudo ip link add dev endev0a type veth peer name endev0b
sudo ip link set dev endev0a up
sudo ip link set dev endev0b up
sudo docker network remove endev0
sudo docker network create -d macvlan -o parent=endev0b endev0

sudo /usr/share/openvswitch/scripts/ovs-ctl start

# Build Test Container
sudo docker build ./testing/docker/ci_test_device1 -t ci_test_device1 -f  ./testing/docker/ci_test_device1/Dockerfile

# Copy configuration to testrun
sudo cp testing/tests/system.json $TESTRUN_DIR/local/system.json

# Copy device configs to testrun
sudo cp -r testing/device_configs/* $TESTRUN_DIR/local/devices

TESTERS=$(jq -r 'keys[]' $MATRIX)
for tester in $TESTERS; do
  if [ -n $1 ] && [ $1 != $tester ]; then
    continue
  fi
  testrun_log=$TEST_DIR/${tester}_testrun.log
  device_log=$TEST_DIR/${tester}_device.log

  image=$(jq -r .$tester.image $MATRIX)
  ethmac=$(jq -r .$tester.ethmac $MATRIX)
  args=$(jq -r .$tester.args $MATRIX)

  touch $testrun_log
  sudo timeout 900 testrun --single-intf --no-ui > $testrun_log 2>&1 &
  TPID=$!

  # Time to wait for testrun to be ready
  WAITING=700

  for i in `seq 1 $WAITING`; do
    tail -1 $testrun_log
      if [[ -n $(fgrep "Waiting for devices on the network" $testrun_log) ]]; then
          break
      fi

      if [[ ! -d /proc/$TPID ]]; then
          cat $testrun_log
          echo "Error encountered starting test run"
          exit 1
      fi
    
      sleep 1
  done

  if [[ $i -eq $WAITING ]]; then
      cat $testrun_log
      echo "Failed after waiting $WAITING seconds for testrun to start"
      exit 1
  fi

  # helps unclean exits when running locally
  sudo docker stop $tester && sudo docker rm $tester
  
  # Load Test Container
  sudo docker run -d \
    --network=endev0 \
    --mac-address=$ethmac \
    --cap-add=NET_ADMIN \
    -v /tmp:/out \
    --privileged \
    --name=$tester \
    ci_test_device1 $args
  
  WAITING=600
  for i in `seq 1 $WAITING`; do
    tail -1 $testrun_log
      if [[ -n $(fgrep "All tests complete" $testrun_log) ]]; then
          sleep 10
          sudo kill -9 $TPID
      fi
  
      if [[ ! -d /proc/$TPID ]]; then
          break
      fi
    
      sleep 1
    done


  # Following line indicates that tests are completed but wait till it exits
  # Completed running test modules on device with mac addr 7e:41:12:d2:35:6a
  # Change this line! - LOGGER.info(f"""Completed running test modules on device
  #          with mac addr {device.mac_addr}""")

  #more runtime/network/*.log | cat 
  sudo docker logs $tester | cat 
  sudo docker kill $tester && sudo docker rm $tester

  cp $TESTRUN_DIR/runtime/test/${ethmac//:/}/report.json $TEST_DIR/$tester.json
  more $TEST_DIR/$tester.json | cat 
  more $testrun_log | cat 

done

pytest -v testing/tests/test_tests.py

exit $?
