#!/bin/bash

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set +o xtrace
ip a
TEST_DIR=/tmp/results
MATRIX=testing/tests/test_tests.json

TEST_CONTAINERS=(
  bacnet_compliant
  dns_compliant
  dns_non_compliant
  services_compliant
  services_non_compliant
)

# Remove and recreate results directory
rm -rf $TEST_DIR/
mkdir -p $TEST_DIR

# Setup requirements
sudo apt-get update
sudo apt-get install -y openvswitch-common openvswitch-switch tcpdump jq moreutils coreutils isc-dhcp-client

# Setup device network
sudo ip link add dev xyz type dummy
sudo ip link add dev endev0a type veth peer name endev0b
sudo ip link set dev endev0a up
sudo ip link set dev endev0b up
sudo docker network remove endev0
sudo docker network create -d macvlan -o parent=endev0b endev0

# Start OVS
sudo /usr/share/openvswitch/scripts/ovs-ctl start

# Build the Test Containers
for container in "${TEST_CONTAINERS[@]}"; do
  sudo docker build ./testing/docker/ci_test_device1/$container -t testrun/$container -f ./testing/docker/ci_test_device1/$container/Dockerfile
done

# Copy configuration to testrun
sudo cp testing/tests/system.json local/system.json

# Copy device configs to testrun
sudo cp -r testing/device_configs/* local/devices

# Extract tester information from the JSON file
TESTERS=$(jq -r 'keys[]' $MATRIX)
for tester in $TESTERS; do

  # Log file paths
  testrun_log=$TEST_DIR/${tester}_testrun.log
  device_log=$TEST_DIR/${tester}_device.log

  # Extract details from JSON
  image=$(jq -r .$tester.image $MATRIX)
  ethmac=$(jq -r .$tester.ethmac $MATRIX)

  # Start the testrun
  touch $testrun_log
  sudo timeout 2400 bin/testrun --single-intf --no-ui --target $ethmac -fw 1.0 > $testrun_log 2>&1 &
  TPID=$!

  # Time to wait for testrun to be ready
  WAITING=750

  for i in `seq 1 $WAITING`; do
    tail -1 $testrun_log
      if [[ -n $(fgrep "Waiting for devices on the network" $testrun_log) ]]; then
          break
      fi

      if [[ ! -d /proc/$TPID ]]; then
          cat $testrun_log
          echo "Error encountered starting testrun"
          exit 1
      fi
    
      sleep 1
  done

  if [[ $i -eq $WAITING ]]; then
      cat $testrun_log
      echo "Failed after waiting $WAITING seconds for testrun to start"
      exit 1
  fi

  # Check if container is running before trying to stop and remove it
  if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${tester}\$"; then
    sudo docker stop $tester && sudo docker rm $tester
  fi

  echo Running container $tester

  # Run the test container
  sudo docker run -d \
    --network=endev0 \
    --mac-address=$ethmac \
    --cap-add=NET_ADMIN \
    -v /tmp:/out \
    --privileged \
    --name=$tester \
    $image
  
  # Wait for test completion
  WAITING=600
  for i in `seq 1 $WAITING`; do
    tail -1 $testrun_log
      if [[ -n $(fgrep "All tests complete" $testrun_log) ]]; then
          sleep 10
          sudo kill -9 $TPID
      fi
  
      if [[ ! -d /proc/$TPID ]]; then
          break
      fi
    
      sleep 1
    done

  sudo docker logs $tester | cat 
  sudo docker kill $tester && sudo docker rm $tester
  echo Stopping container $tester

  cp runtime/test/${ethmac//:/}/report.json $TEST_DIR/$tester.json
  more $TEST_DIR/$tester.json | cat 
  more $testrun_log | cat 

done

# Needs to be sudo because this invokes bin/testrun 
sudo venv/bin/python3 -m pytest -v testing/tests/test_tests.py

exit $?
