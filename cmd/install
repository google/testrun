#!/bin/bash -e

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo Installing application dependencies

# Collect command line arguments
while getopts ":l" option; do
   case $option in
      l) # Install Testrun in local directory
        TESTRUN_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")"/.. && pwd)
   esac
done

# Check if TESTRUN_DIR has been set, otherwise install in /usr/local/testrun
if [[ -z "${TESTRUN_DIR}" ]]; then
  TESTRUN_DIR=/usr/local/testrun

  # Check that user is sudo
  if [[ "$EUID" -ne 0 ]]; then
    echo "Installing Testrun in the default location requires sudo. Run using sudo cmd/install"
    exit 1
  fi

else
  TESTRUN_DIR="${TESTRUN_DIR}"

  # Check that user is in docker group
  if ! (id -nGz "$USER" | grep -qzxF "docker"); then
    echo User is not in docker group. Follow https://docs.docker.com/engine/install/linux-postinstall/ to finish setting up docker.
    exit 1
  fi

fi

echo Installing Testrun at $TESTRUN_DIR

# Create the folder if it doesn't exist
mkdir -p $TESTRUN_DIR
cd $TESTRUN_DIR

# Activate the Python virtual environment
python3 -m venv venv
source venv/bin/activate

# Install Python dependencies in virtual environment
pip3 install -r framework/requirements.txt

# Copy the default configuration
cp -n local/system.json.example local/system.json

# Exit out of python virtual environment
deactivate

# Build docker images
cmd/build

# Create local folders
mkdir -p local/devices
mkdir -p local/root_certs
mkdir -p local/risk_profiles
mkdir -p local/ui/certs

# Add hosts entry
HOST="127.0.0.1 testrun.io"
grep -qxF "$HOST" /etc/hosts || echo $HOST | sudo tee -a /etc/hosts

# Prepare for certificate generation
UI_CERTS_DIR=$PWD/local/ui/certs
CA_NAME=testrun.ca
CRT_NAME=testrun

# Generate CA certificate
openssl genrsa -aes256 -out $UI_CERTS_DIR/$CA_NAME.key -passout pass:supersecurepassword 4096

openssl req -x509 -new -nodes -key $UI_CERTS_DIR/$CA_NAME.key -passin pass:supersecurepassword -sha256 -days 1826 -out $UI_CERTS_DIR/$CA_NAME.crt -subj "/C=US/O=Google/CN=Testrun CA"

# Trust CA certificate
mkdir -p /usr/local/share/ca-certificates/
cp $UI_CERTS_DIR/$CA_NAME.crt /usr/local/share/ca-certificates/$CA_NAME.crt

# Create signing config file
echo 'subjectAltName = DNS:testrun.io' >> $UI_CERTS_DIR/$CRT_NAME.ext

# Create signing request
openssl req -new -nodes -out $UI_CERTS_DIR/$CRT_NAME.csr -newkey rsa:4096 -keyout $UI_CERTS_DIR/$CRT_NAME.key -subj "/C=US/O=Google/CN=Testrun"

# Complete signing
openssl x509 -req -in $UI_CERTS_DIR/$CRT_NAME.csr -CA $UI_CERTS_DIR/$CA_NAME.crt -CAkey $UI_CERTS_DIR/$CA_NAME.key -passin pass:supersecurepassword -CAcreateserial -out $UI_CERTS_DIR/$CRT_NAME.signed.crt -days 500 -sha256 -extfile $UI_CERTS_DIR/$CRT_NAME.ext

# Update trusted Ca certificates
update-ca-certificates


# Set file permissions on local
# This does not work on GitHub actions
if logname ; then
  USER_NAME=$(logname)
  sudo chown -R "$USER_NAME" local
fi

echo Finished installing Testrun
