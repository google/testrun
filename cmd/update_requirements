# #!/bin/bash -e

# # Copyright 2023 Google LLC
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #    https://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

# update_requirements(){
# 	modules_dir="$1"
# 	for dir in $modules_dir/* ; do
# 	  echo "dir: $dir"
# 	  module=$(basename "$dir")
# 	  MODULE_DIR="$PWD/$modules_dir/$module/python"
# 	  IMAGE=testrun/$module
# 	  # Check if updating the test modules
# 	  if [[ $modules_dir == *test* ]]; then
# 	    # Append '-test' to the variable
# 		IMAGE="${IMAGE}-test"
# 	  fi
# 	  echo "Module dir: $MODULE_DIR"
# 	  echo "Image: $IMAGE"
# 	  echo Updating requirements for module $modules_dir/$module...

# 	  if [ -e "$MODULE_DIR/requirements.txt" ]; then
# 	    if docker run --rm -v "$PWD/$modules_dir/$module/python/:/testrun/python/" --entrypoint /bin/bash $IMAGE -c "pip3 freeze > /testrun/python/requirements_freeze.txt" ; then
# 	      echo Successfully built requirements file for module $modules_dir/$module

# 	      # Normalize line endings and remove extra spaces
# 	      dos2unix "$MODULE_DIR/requirements.txt" "$MODULE_DIR/requirements_freeze.txt"
# 	      sed -i 's/^[ \t]*//;s/[ \t]*$//' "$MODULE_DIR/requirements.txt" "$MODULE_DIR/requirements_freeze.txt"

# 	      # Temporary file to store unique packages
# 	      > "$MODULE_DIR/unique_freeze.txt"

# 	      # Find unique packages in requirements_freeze.txt that are not in requirements.txt
# 	      while IFS= read -r freeze_line; do
# 	        # Extract the package name from freeze_line
# 	        freeze_package=$(echo "$freeze_line" | cut -d'=' -f1 | xargs)
	        
# 	        echo "Frozen package: $freeze_package"
# 	        # Search for the package name in requirements.txt, ignoring case and whitespace
# 	        if ! grep -iq "^${freeze_package}$" "$MODULE_DIR/requirements.txt"; then
# 	          echo "$freeze_line" >> "$MODULE_DIR/unique_freeze.txt"
# 	        fi
# 	      done < "$MODULE_DIR/requirements_freeze.txt"

#  		  # Temporary file to store generated requirements
# 	      > "$MODULE_DIR/requirements_gen.txt"

# 	      # Add the downstream packages at the top of requirements_gen.txt
# 	      # so we pull in package dependencies before the defined dependency
# 	      # to prevent auto-upgrades in the package pipeline
# 	      echo "# Dependencies to user defined packages" > "$MODULE_DIR/requirements_gen.txt"
# 	      echo -e "# Package dependencies should always be defined before the user defined" >> "$MODULE_DIR/requirements_gen.txt"
# 	      echo -e "# packages to prevent auto-upgrades of stable dependencies" >> "$MODULE_DIR/requirements_gen.txt"
# 	      cat "$MODULE_DIR/unique_freeze.txt" >> "$MODULE_DIR/requirements_gen.txt"

# 	      # Create the requirements_gen.txt file
# 	      echo -e "\n# User defined packages" >> "$MODULE_DIR/requirements_gen.txt"

# 	      # Loop through each package in requirements.txt
# 	      while IFS= read -r package; do
# 	        # Trim leading and trailing whitespace from package
# 	        package=$(echo "$package" | xargs)
# 	        echo "Package: $package"

# 	        # Extract the base package name (without version or any comparison operator)
# 	        base_package=$(echo "$package" | sed -E 's/[<>=!].*//')
# 	        echo "Base package: $base_package"

# 	        # Check if the base package is a comment and non-empty
# 			if [[ -n "$base_package" && "$base_package" != \#* ]]; then
# 			  # Perform the grep only if it is not a comment
# 			  versioned_package=$(grep -i "^${base_package}==" "$MODULE_DIR/requirements_freeze.txt")
# 			else
# 			  # Set versioned_package to empty if it's a comment
# 			  versioned_package=""
# 			fi

# 	        # Debug output: Print the result of matching
# 	        echo "Versioned Package: '$versioned_package'"

# 	        if [ -n "$versioned_package" ]; then
# 	          # If the package with the version is found, add it to requirements_gen.txt
# 	          echo "$versioned_package" >> "$MODULE_DIR/requirements_gen.txt"
# 	        else
# 	          # If not found, just add the package as is from requirements.txt
# 	          echo "$package" >> "$MODULE_DIR/requirements_gen.txt"
# 	        fi
# 	      done < "$MODULE_DIR/requirements.txt"
# 	      echo "Module done"

# 	    else
# 	      echo An error occurred while building requirements file for network module $module
# 	      exit 1
# 	    fi
# 	  else
# 	    echo No requirements.txt file defined for this module
# 	  fi
# 	done
# }
# echo Updating python requirements in network modules
# update_requirements modules/network

# echo Updating python requirements in test modules
# update_requirements modules/test
